/**
 * This is an autogenerated file created by the Stencil build process.
 * It contains typing information for all components that exist in this project
 * and imports for stencil collections that might be configured in your stencil.config.js file
 */

import {
  MatchResults,
  RouterHistory,
} from '@stencil/router';

declare global {
  interface HTMLStencilElement extends HTMLElement {
    componentOnReady(): Promise<this>;
    componentOnReady(done: (ele?: this) => void): void;
  }
}



import {
  AppAddEditUserCar as AppAddEditUserCar
} from './components/app-add-edit-user-car/app-add-edit-user-car';

declare global {
  interface HTMLAppAddEditUserCarElement extends AppAddEditUserCar, HTMLStencilElement {
  }
  var HTMLAppAddEditUserCarElement: {
    prototype: HTMLAppAddEditUserCarElement;
    new (): HTMLAppAddEditUserCarElement;
  };
  interface HTMLElementTagNameMap {
    "app-add-edit-user-car": HTMLAppAddEditUserCarElement;
  }
  interface ElementTagNameMap {
    "app-add-edit-user-car": HTMLAppAddEditUserCarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-add-edit-user-car": JSXElements.AppAddEditUserCarAttributes;
    }
  }
  namespace JSXElements {
    export interface AppAddEditUserCarAttributes extends HTMLAttributes {
      history?: RouterHistory;
      match?: MatchResults;
    }
  }
}


import {
  AppContact as AppContact
} from './components/app-contact/app-contact';

declare global {
  interface HTMLAppContactElement extends AppContact, HTMLStencilElement {
  }
  var HTMLAppContactElement: {
    prototype: HTMLAppContactElement;
    new (): HTMLAppContactElement;
  };
  interface HTMLElementTagNameMap {
    "app-contact": HTMLAppContactElement;
  }
  interface ElementTagNameMap {
    "app-contact": HTMLAppContactElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-contact": JSXElements.AppContactAttributes;
    }
  }
  namespace JSXElements {
    export interface AppContactAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppEditUserCar as AppEditUserCar
} from './components/app-edit-user-car/app-edit-user-car';

declare global {
  interface HTMLAppEditUserCarElement extends AppEditUserCar, HTMLStencilElement {
  }
  var HTMLAppEditUserCarElement: {
    prototype: HTMLAppEditUserCarElement;
    new (): HTMLAppEditUserCarElement;
  };
  interface HTMLElementTagNameMap {
    "app-edit-user-car": HTMLAppEditUserCarElement;
  }
  interface ElementTagNameMap {
    "app-edit-user-car": HTMLAppEditUserCarElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-edit-user-car": JSXElements.AppEditUserCarAttributes;
    }
  }
  namespace JSXElements {
    export interface AppEditUserCarAttributes extends HTMLAttributes {
      match?: MatchResults;
    }
  }
}


import {
  AppHome as AppHome
} from './components/app-home/app-home';

declare global {
  interface HTMLAppHomeElement extends AppHome, HTMLStencilElement {
  }
  var HTMLAppHomeElement: {
    prototype: HTMLAppHomeElement;
    new (): HTMLAppHomeElement;
  };
  interface HTMLElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  interface ElementTagNameMap {
    "app-home": HTMLAppHomeElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-home": JSXElements.AppHomeAttributes;
    }
  }
  namespace JSXElements {
    export interface AppHomeAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppMap as AppMap
} from './components/app-map/app-map';

declare global {
  interface HTMLAppMapElement extends AppMap, HTMLStencilElement {
  }
  var HTMLAppMapElement: {
    prototype: HTMLAppMapElement;
    new (): HTMLAppMapElement;
  };
  interface HTMLElementTagNameMap {
    "app-map": HTMLAppMapElement;
  }
  interface ElementTagNameMap {
    "app-map": HTMLAppMapElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-map": JSXElements.AppMapAttributes;
    }
  }
  namespace JSXElements {
    export interface AppMapAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  AppProfile as AppProfile
} from './components/app-profile/app-profile';

declare global {
  interface HTMLAppProfileElement extends AppProfile, HTMLStencilElement {
  }
  var HTMLAppProfileElement: {
    prototype: HTMLAppProfileElement;
    new (): HTMLAppProfileElement;
  };
  interface HTMLElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  interface ElementTagNameMap {
    "app-profile": HTMLAppProfileElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-profile": JSXElements.AppProfileAttributes;
    }
  }
  namespace JSXElements {
    export interface AppProfileAttributes extends HTMLAttributes {
      match?: MatchResults;
    }
  }
}


import {
  AppUserCars as AppUserCars
} from './components/app-user-cars/app-user-cars';

declare global {
  interface HTMLAppUserCarsElement extends AppUserCars, HTMLStencilElement {
  }
  var HTMLAppUserCarsElement: {
    prototype: HTMLAppUserCarsElement;
    new (): HTMLAppUserCarsElement;
  };
  interface HTMLElementTagNameMap {
    "app-user-cars": HTMLAppUserCarsElement;
  }
  interface ElementTagNameMap {
    "app-user-cars": HTMLAppUserCarsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "app-user-cars": JSXElements.AppUserCarsAttributes;
    }
  }
  namespace JSXElements {
    export interface AppUserCarsAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  ContactForm as ContactForm
} from './components/contact-form/contact-form';

declare global {
  interface HTMLContactFormElement extends ContactForm, HTMLStencilElement {
  }
  var HTMLContactFormElement: {
    prototype: HTMLContactFormElement;
    new (): HTMLContactFormElement;
  };
  interface HTMLElementTagNameMap {
    "contact-form": HTMLContactFormElement;
  }
  interface ElementTagNameMap {
    "contact-form": HTMLContactFormElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "contact-form": JSXElements.ContactFormAttributes;
    }
  }
  namespace JSXElements {
    export interface ContactFormAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  FooterComponent as FooterComponent
} from './components/footer-component/footer-component';

declare global {
  interface HTMLFooterComponentElement extends FooterComponent, HTMLStencilElement {
  }
  var HTMLFooterComponentElement: {
    prototype: HTMLFooterComponentElement;
    new (): HTMLFooterComponentElement;
  };
  interface HTMLElementTagNameMap {
    "footer-component": HTMLFooterComponentElement;
  }
  interface ElementTagNameMap {
    "footer-component": HTMLFooterComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "footer-component": JSXElements.FooterComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface FooterComponentAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  HeaderComponent as HeaderComponent
} from './components/header-component/header-component';

declare global {
  interface HTMLHeaderComponentElement extends HeaderComponent, HTMLStencilElement {
  }
  var HTMLHeaderComponentElement: {
    prototype: HTMLHeaderComponentElement;
    new (): HTMLHeaderComponentElement;
  };
  interface HTMLElementTagNameMap {
    "header-component": HTMLHeaderComponentElement;
  }
  interface ElementTagNameMap {
    "header-component": HTMLHeaderComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "header-component": JSXElements.HeaderComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface HeaderComponentAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  LazyImg as LazyImg
} from './components/lazy-img/lazy-img';

declare global {
  interface HTMLLazyImgElement extends LazyImg, HTMLStencilElement {
  }
  var HTMLLazyImgElement: {
    prototype: HTMLLazyImgElement;
    new (): HTMLLazyImgElement;
  };
  interface HTMLElementTagNameMap {
    "lazy-img": HTMLLazyImgElement;
  }
  interface ElementTagNameMap {
    "lazy-img": HTMLLazyImgElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "lazy-img": JSXElements.LazyImgAttributes;
    }
  }
  namespace JSXElements {
    export interface LazyImgAttributes extends HTMLAttributes {
      alt?: string;
      src?: string;
    }
  }
}


import {
  LoginFirebase as LoginFirebase
} from './components/login-firebase/login-firebase';

declare global {
  interface HTMLLoginFirebaseElement extends LoginFirebase, HTMLStencilElement {
  }
  var HTMLLoginFirebaseElement: {
    prototype: HTMLLoginFirebaseElement;
    new (): HTMLLoginFirebaseElement;
  };
  interface HTMLElementTagNameMap {
    "login-firebase": HTMLLoginFirebaseElement;
  }
  interface ElementTagNameMap {
    "login-firebase": HTMLLoginFirebaseElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "login-firebase": JSXElements.LoginFirebaseAttributes;
    }
  }
  namespace JSXElements {
    export interface LoginFirebaseAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MapComponent as MapComponent
} from './components/map-component/map-component';

declare global {
  interface HTMLMapComponentElement extends MapComponent, HTMLStencilElement {
  }
  var HTMLMapComponentElement: {
    prototype: HTMLMapComponentElement;
    new (): HTMLMapComponentElement;
  };
  interface HTMLElementTagNameMap {
    "map-component": HTMLMapComponentElement;
  }
  interface ElementTagNameMap {
    "map-component": HTMLMapComponentElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "map-component": JSXElements.MapComponentAttributes;
    }
  }
  namespace JSXElements {
    export interface MapComponentAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MenuLinks as MenuLinks
} from './components/menu-links/menu-links';

declare global {
  interface HTMLMenuLinksElement extends MenuLinks, HTMLStencilElement {
  }
  var HTMLMenuLinksElement: {
    prototype: HTMLMenuLinksElement;
    new (): HTMLMenuLinksElement;
  };
  interface HTMLElementTagNameMap {
    "menu-links": HTMLMenuLinksElement;
  }
  interface ElementTagNameMap {
    "menu-links": HTMLMenuLinksElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "menu-links": JSXElements.MenuLinksAttributes;
    }
  }
  namespace JSXElements {
    export interface MenuLinksAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  MyApp as MyApp
} from './components/my-app/my-app';

declare global {
  interface HTMLMyAppElement extends MyApp, HTMLStencilElement {
  }
  var HTMLMyAppElement: {
    prototype: HTMLMyAppElement;
    new (): HTMLMyAppElement;
  };
  interface HTMLElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  interface ElementTagNameMap {
    "my-app": HTMLMyAppElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "my-app": JSXElements.MyAppAttributes;
    }
  }
  namespace JSXElements {
    export interface MyAppAttributes extends HTMLAttributes {
      
    }
  }
}


import {
  SaveLocationFirestore as SaveLocationFirestore
} from './components/save-location-firestore/save-location-firestore';

declare global {
  interface HTMLSaveLocationFirestoreElement extends SaveLocationFirestore, HTMLStencilElement {
  }
  var HTMLSaveLocationFirestoreElement: {
    prototype: HTMLSaveLocationFirestoreElement;
    new (): HTMLSaveLocationFirestoreElement;
  };
  interface HTMLElementTagNameMap {
    "save-location-firestore": HTMLSaveLocationFirestoreElement;
  }
  interface ElementTagNameMap {
    "save-location-firestore": HTMLSaveLocationFirestoreElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "save-location-firestore": JSXElements.SaveLocationFirestoreAttributes;
    }
  }
  namespace JSXElements {
    export interface SaveLocationFirestoreAttributes extends HTMLAttributes {
      action?: string;
      saveText?: string;
    }
  }
}


import {
  UserCars as UserCars
} from './components/user-cars/user-cars';

declare global {
  interface HTMLUserCarsElement extends UserCars, HTMLStencilElement {
  }
  var HTMLUserCarsElement: {
    prototype: HTMLUserCarsElement;
    new (): HTMLUserCarsElement;
  };
  interface HTMLElementTagNameMap {
    "user-cars": HTMLUserCarsElement;
  }
  interface ElementTagNameMap {
    "user-cars": HTMLUserCarsElement;
  }
  namespace JSX {
    interface IntrinsicElements {
      "user-cars": JSXElements.UserCarsAttributes;
    }
  }
  namespace JSXElements {
    export interface UserCarsAttributes extends HTMLAttributes {
      
    }
  }
}

declare global { namespace JSX { interface StencilJSX {} } }
